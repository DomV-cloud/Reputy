// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reputy.Application.DatabaseContext;

#nullable disable

namespace Reputy.Application.Migrations
{
    [DbContext(typeof(ReputyContext))]
    [Migration("20250704034817_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Reputy.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AdvertisementRealEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "street");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "street_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("ID");

                    b.HasIndex("AdvertisementRealEstateId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasAnnotation("Relational:JsonPropertyName", "address");

                    b.HasData(
                        new
                        {
                            ID = new Guid("fb419a08-1490-4069-adf8-a12113a7d128"),
                            AdvertisementRealEstateId = new Guid("cf51014d-7fb0-433e-9bc4-97c1b42a3cc6"),
                            City = "Praha",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2015),
                            PostalCode = "12000",
                            Street = "Náměstí Míru",
                            StreetNumber = "5",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2016)
                        },
                        new
                        {
                            ID = new Guid("155bf4ef-e3d7-4987-b7e1-b7836f0dd4df"),
                            AdvertisementRealEstateId = new Guid("99999999-9999-9999-9999-999999999999"),
                            City = "Praha",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2022),
                            PostalCode = "12800",
                            Street = "Rašínovo nábřeží",
                            StreetNumber = "12",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2023)
                        },
                        new
                        {
                            ID = new Guid("46bf7244-7ee4-4414-b0de-76119d156855"),
                            AdvertisementRealEstateId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            City = "Brno",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2027),
                            PostalCode = "60200",
                            Street = "U školy",
                            StreetNumber = "45",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2028)
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<decimal?>("Deposit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "deposit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image_urls");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isShared");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "pets_allowed");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasAnnotation("Relational:JsonPropertyName", "advertisement");

                    b.HasData(
                        new
                        {
                            ID = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "Náměstí Míru 5, Praha",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1916),
                            Deposit = 5000m,
                            ImageUrls = "[]",
                            IsShared = true,
                            PetsAllowed = true,
                            Price = 15000,
                            Title = "Moderní byt v centru",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1918),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            ID = new Guid("77777777-7777-7777-7777-777777777777"),
                            Address = "Rašínovo nábřeží 12, Praha 2",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1925),
                            Deposit = 6000m,
                            ImageUrls = "[]",
                            IsShared = false,
                            PetsAllowed = false,
                            Price = 18000,
                            Title = "Byt 2+KK s výhledem na řeku",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1927),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            ID = new Guid("88888888-8888-8888-8888-888888888888"),
                            Address = "U školy 45, Brno",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1933),
                            Deposit = 8000m,
                            ImageUrls = "[]",
                            IsShared = false,
                            PetsAllowed = true,
                            Price = 22000,
                            Title = "Velký byt 3+1 pro rodinu",
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1935),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.AdvertisementRealEstate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AdvertisementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int>("Disposition")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "disposition");

                    b.Property<int>("RentalType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "rentalType");

                    b.Property<decimal>("Size")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("ID");

                    b.HasIndex("AdvertisementId")
                        .IsUnique();

                    b.ToTable("AdvertisementRealEstates");

                    b.HasAnnotation("Relational:JsonPropertyName", "realEstate");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cf51014d-7fb0-433e-9bc4-97c1b42a3cc6"),
                            AdvertisementId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1966),
                            Disposition = 2,
                            RentalType = 2,
                            Size = 30.0m,
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1967)
                        },
                        new
                        {
                            ID = new Guid("99999999-9999-9999-9999-999999999999"),
                            AdvertisementId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1973),
                            Disposition = 4,
                            RentalType = 1,
                            Size = 40.0m,
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1975)
                        },
                        new
                        {
                            ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AdvertisementId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1990),
                            Disposition = 5,
                            RentalType = 1,
                            Size = 85.0m,
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1992)
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Reference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid>("FromUserID")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "from_user_id");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<Guid>("RentalID")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "rental_id");

                    b.Property<Guid>("ToUserID")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "to_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("ID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("RentalID");

                    b.HasIndex("ToUserID");

                    b.ToTable("References");

                    b.HasAnnotation("Relational:JsonPropertyName", "references_received");

                    b.HasData(
                        new
                        {
                            ID = new Guid("55555555-5555-5555-5555-555555555555"),
                            Comment = "Velmi spolehlivý pronajímatel",
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2089),
                            FromUserID = new Guid("22222222-2222-2222-2222-222222222222"),
                            Rating = 5m,
                            RentalID = new Guid("44444444-4444-4444-4444-444444444444"),
                            ToUserID = new Guid("11111111-1111-1111-1111-111111111111"),
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2090)
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AdvertisementID")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "advertisement_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "end_date");

                    b.Property<Guid>("LandlordId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "landlord_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("ID");

                    b.HasIndex("AdvertisementID");

                    b.HasIndex("LandlordId");

                    b.HasIndex("TenantId");

                    b.ToTable("Rentals");

                    b.HasAnnotation("Relational:JsonPropertyName", "rentals_tenant");

                    b.HasData(
                        new
                        {
                            ID = new Guid("44444444-4444-4444-4444-444444444444"),
                            AdvertisementID = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2063),
                            EndDate = new DateTime(2026, 7, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LandlordId = new Guid("11111111-1111-1111-1111-111111111111"),
                            StartDate = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = 2,
                            TenantId = new Guid("22222222-2222-2222-2222-222222222222"),
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(2064)
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("Av")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar_url");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "averageRating");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isVerified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "LastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasAnnotation("Relational:JsonPropertyName", "tenant");

                    b.HasData(
                        new
                        {
                            ID = new Guid("11111111-1111-1111-1111-111111111111"),
                            Av = 0,
                            AvatarUrl = "https://example.com/avatar1.png",
                            AverageRating = 0m,
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1746),
                            Email = "jan.novak@example.com",
                            FirstName = "Jan",
                            IsVerified = true,
                            LastName = "Novak",
                            Password = "hashedpassword1",
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1748)
                        },
                        new
                        {
                            ID = new Guid("22222222-2222-2222-2222-222222222222"),
                            Av = 0,
                            AverageRating = 0m,
                            CreatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1755),
                            Email = "eva.svobodova@example.com",
                            FirstName = "Eva",
                            IsVerified = false,
                            LastName = "Svobodova",
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 7, 4, 5, 48, 16, 805, DateTimeKind.Local).AddTicks(1757)
                        });
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Address", b =>
                {
                    b.HasOne("Reputy.Domain.Entities.AdvertisementRealEstate", "AdvertisementRealEstate")
                        .WithOne("Address")
                        .HasForeignKey("Reputy.Domain.Entities.Address", "AdvertisementRealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertisementRealEstate");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Advertisement", b =>
                {
                    b.HasOne("Reputy.Domain.Entities.User", "Landlord")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.AdvertisementRealEstate", b =>
                {
                    b.HasOne("Reputy.Domain.Entities.Advertisement", "Advertisement")
                        .WithOne("AdvertisementRealEstate")
                        .HasForeignKey("Reputy.Domain.Entities.AdvertisementRealEstate", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Reference", b =>
                {
                    b.HasOne("Reputy.Domain.Entities.User", "FromUser")
                        .WithMany("ReferencesWritten")
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Reputy.Domain.Entities.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reputy.Domain.Entities.User", "ToUser")
                        .WithMany("ReferencesReceived")
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Rental");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Rental", b =>
                {
                    b.HasOne("Reputy.Domain.Entities.Advertisement", "Advertisement")
                        .WithMany()
                        .HasForeignKey("AdvertisementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reputy.Domain.Entities.User", "Landlord")
                        .WithMany("RentalsAsLandlord")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Reputy.Domain.Entities.User", "Tenant")
                        .WithMany("RentalsAsTenant")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Landlord");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.Advertisement", b =>
                {
                    b.Navigation("AdvertisementRealEstate")
                        .IsRequired();
                });

            modelBuilder.Entity("Reputy.Domain.Entities.AdvertisementRealEstate", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Reputy.Domain.Entities.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("ReferencesReceived");

                    b.Navigation("ReferencesWritten");

                    b.Navigation("RentalsAsLandlord");

                    b.Navigation("RentalsAsTenant");
                });
#pragma warning restore 612, 618
        }
    }
}
